{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Install","text":"<p>Generate openapi client and install dependencies. <pre><code>.\\install.sh\npip install .\n</code></pre> In install.sh the python client library is generated from the openapi-spec at https://platform.planqk.de/qc-catalog/docs. Addintionally there are some problems with generating the correct types which are also handled by replacing the lines with the script.</p>"},{"location":"#test","title":"Test","text":"<p>Install dev dependencies. <pre><code>pip install .[dev]\n</code></pre></p> <p>Execute tests. <pre><code>pytest -s -m MARK --log-cli-level=LOG_LEVEL .\n</code></pre></p> <p>Some tests are marked depending on their behavior. Values for MARK are defined in the pyproject.toml - interactive: only run tests with user interaction - slow_service: only run tests wich are slow because of the service creation - auto: only run tests that run fully automatic</p>"},{"location":"#example","title":"Example","text":""},{"location":"#upload-data-in-the-requestpayload-below-1-mb","title":"Upload data in the request(payload below 1 Mb)","text":"<pre><code>from pyplanqk import PyPlanQK\n\n# Enter a valid PlanQK API-Key(look at www.planqk.de/settings/access-tokens)\napiKey = \"YOUR_PLANQK_API_KEY\"\nplnqk = pyplanqk.PyPlanQK(api_key)\n\n# Define a fancy service name\nservice_name = \"YOUR_SERVICE_NAME\"\n\n# Full config object to define a service\nconfig = {}\nconfig[\"name\"] = service_name\nconfig[\"user_code\"] = open(\"PATH_TO_TEMPLATE.zip\", \"rb\")\nconfig[\"api_definition\"] = open(\"PATH_TO_OPENAPI_SPEC.yml\", \"rb\")\nconfig[\"description\"] = \"YOUR SERVICE DESCRIPTION\"\nconfig[\"milli_cpus\"] = 1000\nconfig[\"memory_in_megabytes\"] = 4096\nconfig[\"runtime\"] = \"PYTHON_TEMPLATE\"\nconfig[\"gpu_count\"] = 0\nconfig[\"gpu_accelerator\"] = \"NONE\"\n\n# Trigger the creation of a service with status polling until the service is ready set up\nservice = plnqk.create_service(config)\n\n# Trigger an execution on your service with your data and params dictionaries\nresult = plnqk.execute_service(service_name, \n                               data={\"k\": \"v\", ...}, \n                               params={\"k\": \"v\", ...})\n</code></pre>"},{"location":"#use-data-from-data-pool","title":"Use data from data pool","text":"<pre><code>from pyplanqk import PyPlanQK\n\n# Enter a valid PlanQK API-Key(look at www.planqk.de/settings/access-tokens)\napiKey = \"YOUR_PLANQK_API_KEY\"\nplnqk = pyplanqk.PyPlanQK(api_key)\n\n# Define a fancy service name\nservice_name = \"YOUR_SERVICE_NAME\"\n\n# Define a fancy data pool name\ndata_pool_name = \"YOUR_DATA_POOL_NAME\"\n\n# Create a data pool\ndata_ref = plnqk.create_data_pool(data_pool_name, \n                                  file=open(\"PATH_TO_YOUR_FILE.json\", \"rb\"))\n\n# Full config object to define a service\nconfig = {}\nconfig[\"name\"] = service_name\nconfig[\"user_code\"] = open(\"PATH_TO_TEMPLATE.zip\", \"rb\")\nconfig[\"api_definition\"] = open(\"PATH_TO_OPENAPI_SPEC.yml\", \"rb\")\nconfig[\"description\"] = \"YOUR SERVICE DESCRIPTION\"\nconfig[\"milli_cpus\"] = 1000\nconfig[\"memory_in_megabytes\"] = 4096\nconfig[\"runtime\"] = \"PYTHON_TEMPLATE\"\nconfig[\"gpu_count\"] = 0\nconfig[\"gpu_accelerator\"] = \"NONE\"\n\n# Trigger the creation of a service with status polling until the service is ready set up\nservice = plnqk.create_service(config)\n\n# Trigger an execution on your service with your data and params dictionaries\nresult = plnqk.execute_service(service_name, \n                               data_ref=data_ref, \n                               params={\"k\": \"v\", ...})\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#src.pyplanqk.helpers.get_path_delimiter","title":"<code>get_path_delimiter()</code>","text":"<p>The get_path_delimiter function returns the path delimiter for the current operating system.</p> <p>Returns:</p> Type Description <code>str</code> <p>The appropriate path delimiter for the operating system</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/helpers.py</code> <pre><code>def get_path_delimiter() -&gt; str:\n    \"\"\"\n    The get_path_delimiter function returns the path delimiter for the current operating system.\n\n    Args:\n\n    Returns:\n        The appropriate path delimiter for the operating system\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    return \"/\"\n</code></pre>"},{"location":"reference/#src.pyplanqk.helpers.wait_for_application_job_to_be_finished","title":"<code>wait_for_application_job_to_be_finished(url, access_token, timeout=500, step=1)</code>","text":"<p>The wait_for_application_job_to_be_finished function waits for the application job to be finished.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>str: Define the url of the execution</p> required <code>access_token</code> <code>str</code> <p>str: Authenticate the user</p> required <code>timeout</code> <code>int</code> <p>int: Set the timeout for the job to finish</p> <code>500</code> <code>step</code> <code>int</code> <p>int: Specify the time interval between each request</p> <code>1</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the execution is finished and false otherwise</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/helpers.py</code> <pre><code>def wait_for_application_job_to_be_finished(url: str, access_token: str, timeout: int = 500, step: int = 1) -&gt; bool:\n    \"\"\"\n    The wait_for_application_job_to_be_finished function waits for the application job to be finished.\n\n    Args:\n        url: str: Define the url of the execution\n        access_token: str: Authenticate the user\n        timeout: int: Set the timeout for the job to finish\n        step: int: Specify the time interval between each request\n\n    Returns:\n        True if the execution is finished and false otherwise\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Wait for execution to be finished\")\n\n    headers = {\n        \"accept\": \"application/json\",\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    status_timer = 0\n    execution_status = requests.get(url=url, headers=headers, timeout=30).json()[\"status\"]\n    while execution_status not in [\"SUCCEEDED\", \"FAILED\"]:\n        time.sleep(step)\n        status_timer += step\n        if status_timer &gt; timeout:\n            logger.debug(\"\")\n            logger.debug(\"Execution timeout\")\n            return False\n        execution_status = requests.get(url=url, headers=headers, timeout=30).json()[\"status\"]\n        if execution_status == \"SUCCEEDED\":\n            logger.debug(\"Execution succeeded\")\n            return True\n        if execution_status == \"FAILED\":\n            logger.debug(\"Execution failed\")\n            return False\n\n        logger.debug(\"%d|%s Wait for job...\", status_timer + 1, timeout)\n    return True\n</code></pre>"},{"location":"reference/#src.pyplanqk.helpers.wait_for_service_job_to_be_finished","title":"<code>wait_for_service_job_to_be_finished(job_id, api_key, timeout=500, step=1)</code>","text":"<p>The wait_for_service_job_to_be_finished function is used to wait for a service job to be finished.     It takes the following parameters:         - job_id: The ID of the service job that we want to wait for.         - api_key: A dictionary containing an API key and its corresponding secret, which are needed in order             to access the Service Platform's APIs. This parameter is optional; if it isn't provided, then             default values will be used instead (see below). If you do provide this parameter, then it should have             two keys named \"apiKey\" and \"apiSecret\", whose values</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>str: Identify the job</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Define the api key as a dictionary</p> required <code>str]</code> <p>Define the job_id as a string</p> required <code>timeout</code> <code>int</code> <p>int: Set the time limit for waiting for a job to finish</p> <code>500</code> <code>step</code> <code>int</code> <p>int: Define the time interval between each status check</p> <code>1</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the service job is finished</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/helpers.py</code> <pre><code>def wait_for_service_job_to_be_finished(job_id: str,\n                                        api_key: Dict[str, str],\n                                        timeout: int = 500,\n                                        step: int = 1) -&gt; bool:\n    \"\"\"\n    The wait_for_service_job_to_be_finished function is used to wait for a service job to be finished.\n        It takes the following parameters:\n            - job_id: The ID of the service job that we want to wait for.\n            - api_key: A dictionary containing an API key and its corresponding secret, which are needed in order\n                to access the Service Platform's APIs. This parameter is optional; if it isn't provided, then\n                default values will be used instead (see below). If you do provide this parameter, then it should have\n                two keys named &amp;quot;apiKey&amp;quot; and &amp;quot;apiSecret&amp;quot;, whose values\n\n    Args:\n        job_id: str: Identify the job\n        api_key: Dict[str: Define the api key as a dictionary\n        str]: Define the job_id as a string\n        timeout: int: Set the time limit for waiting for a job to finish\n        step: int: Define the time interval between each status check\n\n    Returns:\n        True if the service job is finished\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Wait for service job to be finished\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    status_timer = 0\n    status = service_jobs_api.get_job(job_id).status\n\n    while status not in [\"SUCCEEDED\", \"FAILED\"]:\n        time.sleep(step)\n        status_timer += step\n        if status_timer &gt; timeout:\n            logger.debug(\"\")\n            logger.debug(\"Execution timeout\")\n            return False\n        status = service_jobs_api.get_job(job_id).status\n        if status == \"SUCCEEDED\":\n            logger.debug(\"Execution succeeded\")\n            return True\n        if status == \"FAILED\":\n            logger.debug(\"Execution failed\")\n            return False\n\n        logger.debug(\"%d|%s Wait for job...\", status_timer + 1, timeout)\n    return True\n</code></pre>"},{"location":"reference/#src.pyplanqk.helpers.wait_for_service_to_be_created","title":"<code>wait_for_service_to_be_created(service_id, version_id, api_key, timeout=500, step=1)</code>","text":"<p>The wait_for_service_to_be_created function waits for a service to be created.</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>str</code> <p>str: Specify the service_id of a service</p> required <code>version_id</code> <code>str</code> <p>str: Specify the version of the service to be deleted</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api_key as a dictionary</p> required <code>str]</code> <p>Define the type of the parameter</p> required <code>timeout</code> <code>int</code> <p>int: Set the maximum time to wait for the service to be created</p> <code>500</code> <code>step</code> <code>int</code> <p>int: Specify the time interval between each check</p> <code>1</code> <code></code> <p>Get the service id and version id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the service is created successfully</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/helpers.py</code> <pre><code>def wait_for_service_to_be_created(\n        service_id: str,\n        version_id: str,\n        api_key: Dict[str, str],\n        timeout: int = 500,\n        step: int = 1,\n) -&gt; bool:\n    \"\"\"\n    The wait_for_service_to_be_created function waits for a service to be created.\n\n    Args:\n        service_id: str: Specify the service_id of a service\n        version_id: str: Specify the version of the service to be deleted\n        api_key: Dict[str: Pass the api_key as a dictionary\n        str]: Define the type of the parameter\n        timeout: int: Set the maximum time to wait for the service to be created\n        step: int: Specify the time interval between each check\n        : Get the service id and version id\n\n    Returns:\n        True if the service is created successfully\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Wait for service to be created\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    timer = 0\n    build_status = services_api.get_build_status(service_id, version_id)\n    assert build_status is not None\n    while build_status[\"status\"] != \"SUCCESS\" or build_status[\"status\"] != \"FAILED\":\n        time.sleep(step)\n        timer += step\n        if timer &gt; timeout:\n            return False\n        # Check build status again to see if job failed or succeeded\n        build_status = services_api.get_build_status(service_id=service_id, version_id=version_id)\n        assert build_status is not None\n        if build_status[\"status\"] == \"SUCCESS\":\n            logger.debug(\"\")\n            return True\n        if build_status[\"status\"] in [\"FAILED\", \"CANCELLED\"]:\n            logger.debug(\"\")\n            return False\n\n        logger.debug(\"%d|%s Creating service...\", timer + 1, timeout)\n    return True\n</code></pre>"},{"location":"reference/#src.pyplanqk.high_level_actions.PyPlanQK","title":"<code>PyPlanQK</code>","text":"Source code in <code>src/pyplanqk/high_level_actions.py</code> <pre><code>class PyPlanQK:\n    def __init__(self, api_key):\n        self.api_key = {\"apiKey\": api_key}\n        self.token_url = PLANKQ_TOKEN_URL\n\n    def create_service(self, config: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"\n        The create_service function creates a service on PlanQK.\n            Args:\n                config (dict): A dictionary containing the configuration for creating a service.\n\n        Args:\n            self: Refer to the instance of the class\n            config: Dict[str: Pass the configuration of the service to be created\n            Any]: Specify the type of the parameter\n\n        Returns:\n            A dictionary with the following keys:\n\n        Doc Author:\n            Trelent\n        \"\"\"\n        service_name = None\n        try:\n            service_name = config[\"name\"]\n            logger.info(\"Create service: %s.\", service_name)\n            service = get_service(service_name, self.api_key)\n\n            if service is not None:\n                logger.info(\"Service: %s already created.\", service_name)\n\n                return service\n\n            service = create_managed_service(config, self.api_key)\n\n            version = get_version(service_name, self.api_key)\n            service_id = service[\"id\"]\n            version_id = version[\"id\"]\n            wait_for_service_to_be_created(service_id, version_id, self.api_key, timeout=500, step=5)\n\n            service = get_service(service_name, self.api_key)\n            logger.info(\"Service: %s created.\", service_name)\n            return service\n        except Exception as e:\n            if service_name is not None:\n                logger.error(\"Creation of service: %s failed.\", service_name)\n            else:\n                logger.error(\"Creation of service failed.\")\n            logger.error(e)\n            raise e\n\n    def execute_service(\n        self,\n        service_name: str,\n        params: Dict[str, Any],\n        data: Dict[str, Any] = None,\n        data_ref: Dict[str, Any] = None,\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        The execute_service function is used to execute a service.\n\n        Args:\n            self: Bind the function to a class\n            service_name: str: Specify the name of the service to be executed\n            params: Dict[str: Pass the parameters to the service\n            Any]: Define the type of data that is passed to the function\n            data: Dict[str: Pass the data to be processed by the service\n            Any]: Specify the type of data that is returned by the function\n            data_ref: Dict[str: Pass the data pool reference\n            Any]: Define the type of the data that is passed to the function\n            : Pass the service name to the function\n\n        Returns:\n            The result of the service execution\n\n        Doc Author:\n            Trelent\n        \"\"\"\n        logger.info(\"Execute service: %s.\", service_name)\n\n        try:\n            if data_ref is not None:\n                logger.debug(\"triggering service job with data pool: %s.\", data_ref)\n                job = trigger_service_job(\n                    service_name=service_name,\n                    api_key=self.api_key,\n                    mode=\"DATA_POOL\",\n                    data_ref=data_ref,\n                    params=params,\n                )\n            else:\n                logger.debug(\"triggering service job with data upload: %s.\", data)\n                job = trigger_service_job(\n                    service_name=service_name,\n                    api_key=self.api_key,\n                    mode=\"DATA_UPLOAD\",\n                    data=data,\n                    params=params,\n                )\n\n            job_id = job[\"id\"]\n            result = get_service_job_result(job_id, self.api_key)\n            logger.info(\"Service execution: %s finished.\", service_name)\n            return result\n        except Exception as e:\n            logger.error(\"Service execution: %s failed.\", service_name)\n            logger.error(e)\n            raise e\n\n    def create_data_pool(self, data_pool_name: Optional[str], file) -&gt; Dict[str, Any]:\n        \"\"\"\n        The create_data_pool function creates a data pool with the given name and adds the file to it.\n            If a data pool with that name already exists, then it will not be created again.\n\n        Args:\n            self: Bind the method to an object\n            data_pool_name: Optional[str]: Specify the name of the data pool\n            file: Create a data pool\n\n        Returns:\n            A dictionary with the following keys:\n\n        Doc Author:\n            Trelent\n        \"\"\"\n        logger.info(\"Create data pool: %s...\", data_pool_name)\n\n        try:\n            data_pool = get_data_pool(data_pool_name, self.api_key[\"apiKey\"])\n\n            if data_pool is not None:\n                logger.info(\"Data pool: %s already created.\", data_pool_name)\n\n                return data_pool\n            logger.debug(\"data pool: %s not found. Creating...\", data_pool_name)\n\n            create_data_pool(data_pool_name, self.api_key[\"apiKey\"])\n            logger.debug(\"data pool: %s created. Adding data...\", data_pool_name)\n            add_data_to_data_pool(data_pool_name, file, self.api_key[\"apiKey\"])\n            logger.debug(\"data added to data pool\")\n            file_infos = get_data_pool_file_information(data_pool_name, self.api_key[\"apiKey\"])\n            file_name = file.name.split(get_path_delimiter())[-1]\n            file_info = file_infos[file_name]\n            return file_info\n        except Exception as e:\n            logger.error(\"Creation of data pool: %s failed.\", data_pool_name)\n            logger.error(\"file: %s could not be added to data pool.\", file.name)\n            logger.error(e)\n            raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.high_level_actions.PyPlanQK.create_data_pool","title":"<code>create_data_pool(data_pool_name, file)</code>","text":"<p>The create_data_pool function creates a data pool with the given name and adds the file to it.     If a data pool with that name already exists, then it will not be created again.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>Bind the method to an object</p> required <code>data_pool_name</code> <code>Optional[str]</code> <p>Optional[str]: Specify the name of the data pool</p> required <code>file</code> <p>Create a data pool</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/high_level_actions.py</code> <pre><code>def create_data_pool(self, data_pool_name: Optional[str], file) -&gt; Dict[str, Any]:\n    \"\"\"\n    The create_data_pool function creates a data pool with the given name and adds the file to it.\n        If a data pool with that name already exists, then it will not be created again.\n\n    Args:\n        self: Bind the method to an object\n        data_pool_name: Optional[str]: Specify the name of the data pool\n        file: Create a data pool\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.info(\"Create data pool: %s...\", data_pool_name)\n\n    try:\n        data_pool = get_data_pool(data_pool_name, self.api_key[\"apiKey\"])\n\n        if data_pool is not None:\n            logger.info(\"Data pool: %s already created.\", data_pool_name)\n\n            return data_pool\n        logger.debug(\"data pool: %s not found. Creating...\", data_pool_name)\n\n        create_data_pool(data_pool_name, self.api_key[\"apiKey\"])\n        logger.debug(\"data pool: %s created. Adding data...\", data_pool_name)\n        add_data_to_data_pool(data_pool_name, file, self.api_key[\"apiKey\"])\n        logger.debug(\"data added to data pool\")\n        file_infos = get_data_pool_file_information(data_pool_name, self.api_key[\"apiKey\"])\n        file_name = file.name.split(get_path_delimiter())[-1]\n        file_info = file_infos[file_name]\n        return file_info\n    except Exception as e:\n        logger.error(\"Creation of data pool: %s failed.\", data_pool_name)\n        logger.error(\"file: %s could not be added to data pool.\", file.name)\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.high_level_actions.PyPlanQK.create_service","title":"<code>create_service(config)</code>","text":"<p>The create_service function creates a service on PlanQK.     Args:         config (dict): A dictionary containing the configuration for creating a service.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>Refer to the instance of the class</p> required <code>config</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass the configuration of the service to be created</p> required <code>Any]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/high_level_actions.py</code> <pre><code>def create_service(self, config: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The create_service function creates a service on PlanQK.\n        Args:\n            config (dict): A dictionary containing the configuration for creating a service.\n\n    Args:\n        self: Refer to the instance of the class\n        config: Dict[str: Pass the configuration of the service to be created\n        Any]: Specify the type of the parameter\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    service_name = None\n    try:\n        service_name = config[\"name\"]\n        logger.info(\"Create service: %s.\", service_name)\n        service = get_service(service_name, self.api_key)\n\n        if service is not None:\n            logger.info(\"Service: %s already created.\", service_name)\n\n            return service\n\n        service = create_managed_service(config, self.api_key)\n\n        version = get_version(service_name, self.api_key)\n        service_id = service[\"id\"]\n        version_id = version[\"id\"]\n        wait_for_service_to_be_created(service_id, version_id, self.api_key, timeout=500, step=5)\n\n        service = get_service(service_name, self.api_key)\n        logger.info(\"Service: %s created.\", service_name)\n        return service\n    except Exception as e:\n        if service_name is not None:\n            logger.error(\"Creation of service: %s failed.\", service_name)\n        else:\n            logger.error(\"Creation of service failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.high_level_actions.PyPlanQK.execute_service","title":"<code>execute_service(service_name, params, data=None, data_ref=None)</code>","text":"<p>The execute_service function is used to execute a service.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>Bind the function to a class</p> required <code>service_name</code> <code>str</code> <p>str: Specify the name of the service to be executed</p> required <code>params</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass the parameters to the service</p> required <code>Any]</code> <p>Define the type of data that is passed to the function</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass the data to be processed by the service</p> <code>None</code> <code>Any]</code> <p>Specify the type of data that is returned by the function</p> required <code>data_ref</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass the data pool reference</p> <code>None</code> <code>Any]</code> <p>Define the type of the data that is passed to the function</p> required <code></code> <p>Pass the service name to the function</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The result of the service execution</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/high_level_actions.py</code> <pre><code>def execute_service(\n    self,\n    service_name: str,\n    params: Dict[str, Any],\n    data: Dict[str, Any] = None,\n    data_ref: Dict[str, Any] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The execute_service function is used to execute a service.\n\n    Args:\n        self: Bind the function to a class\n        service_name: str: Specify the name of the service to be executed\n        params: Dict[str: Pass the parameters to the service\n        Any]: Define the type of data that is passed to the function\n        data: Dict[str: Pass the data to be processed by the service\n        Any]: Specify the type of data that is returned by the function\n        data_ref: Dict[str: Pass the data pool reference\n        Any]: Define the type of the data that is passed to the function\n        : Pass the service name to the function\n\n    Returns:\n        The result of the service execution\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.info(\"Execute service: %s.\", service_name)\n\n    try:\n        if data_ref is not None:\n            logger.debug(\"triggering service job with data pool: %s.\", data_ref)\n            job = trigger_service_job(\n                service_name=service_name,\n                api_key=self.api_key,\n                mode=\"DATA_POOL\",\n                data_ref=data_ref,\n                params=params,\n            )\n        else:\n            logger.debug(\"triggering service job with data upload: %s.\", data)\n            job = trigger_service_job(\n                service_name=service_name,\n                api_key=self.api_key,\n                mode=\"DATA_UPLOAD\",\n                data=data,\n                params=params,\n            )\n\n        job_id = job[\"id\"]\n        result = get_service_job_result(job_id, self.api_key)\n        logger.info(\"Service execution: %s finished.\", service_name)\n        return result\n    except Exception as e:\n        logger.error(\"Service execution: %s failed.\", service_name)\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.add_data_to_data_pool","title":"<code>add_data_to_data_pool(data_pool_name, file, api_key)</code>","text":"<p>The add_data_to_data_pool function adds a data source to the specified data pool.</p> <p>Parameters:</p> Name Type Description Default <code>data_pool_name</code> <code>str</code> <p>str: Specify the name of the data pool</p> required <code>file</code> <p>Upload a file to the data pool</p> required <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean value</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def add_data_to_data_pool(data_pool_name: str, file, api_key: str) -&gt; bool:\n    \"\"\"\n    The add_data_to_data_pool function adds a data source to the specified data pool.\n\n    Args:\n        data_pool_name: str: Specify the name of the data pool\n        file: Upload a file to the data pool\n        api_key: str: Authenticate the user\n\n    Returns:\n        A boolean value\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Add data to data pool.\")\n    try:\n        for count in range(10):\n            logger.debug(\"Get pool try: %d\", count + 1)\n            data_pool = get_data_pool(data_pool_name, api_key)\n            if data_pool is not None:\n                break\n            time.sleep(1)\n\n        assert data_pool is not None\n        data_pool_id = data_pool[\"id\"]\n\n        url = f\"https://platform.planqk.de/qc-catalog/data-pools/{data_pool_id}/data-source-descriptors\"\n\n        headers = {\"X-Auth-Token\": api_key}\n\n        files = {\"file\": file}\n\n        response = requests.post(url, headers=headers, files=files, timeout=30)\n        result = response.status_code in [200, 201, 204]\n        return result\n    except Exception as e:\n        logger.error(\"Add data to data pool failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.create_application","title":"<code>create_application(application_name, api_key)</code>","text":"<p>The create_application function creates a new application in the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Specify the name of the application</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def create_application(application_name: str, api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The create_application function creates a new application in the Service Platform.\n\n    Args:\n        application_name: str: Specify the name of the application\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of the parameter\n\n    Returns:\n        A dictionary\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Create application.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        create_app_request = CreateApplicationRequest(name=application_name)\n        application = applications_api.create_application(create_application_request=create_app_request)\n        logger.debug(\"Application created.\")\n        return application\n    except Exception as e:\n        logger.error(\"Create application failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.create_data_pool","title":"<code>create_data_pool(data_pool_name, api_key)</code>","text":"<p>The create_data_pool function creates a data pool on the PlanQK platform.</p> <p>Parameters:</p> Name Type Description Default <code>data_pool_name</code> <code>str</code> <p>str: Name the data pool</p> required <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def create_data_pool(data_pool_name: str, api_key: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    The create_data_pool function creates a data pool on the PlanQK platform.\n\n    Args:\n        data_pool_name: str: Name the data pool\n        api_key: str: Authenticate the user\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Create data pool.\")\n\n    try:\n        url = \"https://platform.planqk.de/qc-catalog/data-pools\"\n\n        headers = {\"Content-Type\": \"application/json\", \"X-Auth-Token\": api_key}\n\n        data = {\"name\": data_pool_name}\n\n        response = requests.post(url, headers=headers, json=data, timeout=30)\n        assert response.status_code in [200, 201, 204]\n        data_pool = response.json()\n        return data_pool\n    except Exception as e:\n        logger.error(\"Create data pool failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.create_managed_service","title":"<code>create_managed_service(config, api_key)</code>","text":"<p>The create_managed_service function creates a managed service in the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass the configuration parameters to the function</p> required <code>Any]</code> <p>Specify the type of the return value</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key to the function</p> required <code>str]</code> <p>Specify the type of the variable</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def create_managed_service(config: Dict[str, Any], api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The create_managed_service function creates a managed service in the Service Platform.\n\n    Args:\n        config: Dict[str: Pass the configuration parameters to the function\n        Any]: Specify the type of the return value\n        api_key: Dict[str: Pass in the api key to the function\n        str]: Specify the type of the variable\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Create managed service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        service = services_api.create_managed_service(**config)\n        service = service.to_dict()\n        logger.debug(\"Service creation triggered.\")\n        return service\n    except Exception as e:\n        logger.error(\"Service creation failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_access_token","title":"<code>get_access_token(consumer_key, consumer_secret, token_url)</code>","text":"<p>The get_access_token function is used to get an access token from the OAuth2 server.</p> <p>Parameters:</p> Name Type Description Default <code>consumer_key</code> <code>str</code> <p>str: Pass in the consumer key for the api</p> required <code>consumer_secret</code> <code>str</code> <p>str: Authenticate the client</p> required <code>token_url</code> <code>str</code> <p>str: Specify the url of the token endpoint</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_access_token(consumer_key: str, consumer_secret: str, token_url: str) -&gt; str:\n    \"\"\"\n    The get_access_token function is used to get an access token from the OAuth2 server.\n\n    Args:\n        consumer_key: str: Pass in the consumer key for the api\n        consumer_secret: str: Authenticate the client\n        token_url: str: Specify the url of the token endpoint\n\n    Returns:\n        A string\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get access_token.\")\n\n    try:\n        data = {\"grant_type\": \"client_credentials\"}\n\n        response = requests.post(\n            token_url, data=data, verify=False, allow_redirects=False, auth=(consumer_key, consumer_secret), timeout=30\n        )\n        assert response.status_code in [200, 201, 204]\n        json_response = response.json()\n        return json_response[\"access_token\"]\n    except Exception as e:\n        logger.error(\"Get access_token failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_all_jobs_for_managed_service","title":"<code>get_all_jobs_for_managed_service(service_name, api_key)</code>","text":"<p>The get_all_jobs_for_managed_service function returns a list of all jobs for the specified service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of all jobs for a managed service</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_all_jobs_for_managed_service(service_name: str, api_key: Dict[str, str]) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_all_jobs_for_managed_service function returns a list of all jobs for the specified service.\n\n    Args:\n        service_name: str: Specify the name of the service\n        api_key: Dict[str: Pass in the api key\n        str]: Specify the service name\n\n    Returns:\n        A list of all jobs for a managed service\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get all service jobs for managed service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_id = service[\"id\"]\n        version_id = version[\"id\"]\n        jobs = services_api.get_managed_service_executions(service_id, version_id)\n        return jobs\n    except Exception as e:\n        logger.error(\"Get all service jobs failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_all_service_jobs","title":"<code>get_all_service_jobs(api_key)</code>","text":"<p>The get_all_service_jobs function returns a list of all service jobs.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key for authentication</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of dictionaries</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_all_service_jobs(api_key: Dict[str, str]) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_all_service_jobs function returns a list of all service jobs.\n\n    Args:\n        api_key: Dict[str: Pass in the api key for authentication\n        str]: Specify the type of the parameter\n\n    Returns:\n        A list of dictionaries\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get all service jobs.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        jobs = service_jobs_api.get_jobs()\n        assert jobs is not None\n        return jobs\n    except Exception as e:\n        logger.error(\"Get all service jobs failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_all_subscriptions","title":"<code>get_all_subscriptions(application_name, api_key)</code>","text":"<p>The get_all_subscriptions function retrieves all subscriptions for a given application.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Specify the name of the application that you want to get subscriptions for</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of the return value</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of dictionaries</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_all_subscriptions(application_name: str, api_key: Dict[str, str]) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_all_subscriptions function retrieves all subscriptions for a given application.\n\n    Args:\n        application_name: str: Specify the name of the application that you want to get subscriptions for\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of the return value\n\n    Returns:\n        A list of dictionaries\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get subscriptions.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        application = get_application(application_name, api_key)\n        assert application is not None\n        application_id = application[\"id\"]\n        subscriptions = applications_api.get_application_subscriptions(application_id)\n        return subscriptions\n    except Exception as e:\n        logger.error(\"Subscriptions retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_application","title":"<code>get_application(application_name, api_key)</code>","text":"<p>The get_application function retrieves the application with the given name from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Specify the name of the application to retrieve</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key as a dictionary</p> required <code>str]</code> <p>Specify the type of the application_name variable</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_application(application_name: str, api_key: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    The get_application function retrieves the application with the given name from the Service Platform.\n\n    Args:\n        application_name: str: Specify the name of the application to retrieve\n        api_key: Dict[str: Pass in the api key as a dictionary\n        str]: Specify the type of the application_name variable\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get application.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        applications = applications_api.get_applications()\n\n        found_application = None\n        for application in applications:\n            if application_name == application[\"name\"]:\n                found_application = application\n        return found_application\n    except Exception as e:\n        logger.error(\"Application retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_application_job_info","title":"<code>get_application_job_info(service_name, job_id, access_token, api_key)</code>","text":"<p>The get_application_job_info function is used to retrieve the status of a job that has been submitted to an application.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Identify the service</p> required <code>job_id</code> <code>str</code> <p>str: Identify the job</p> required <code>access_token</code> <code>str</code> <p>str: Authenticate the user</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key for the service</p> required <code>str]</code> <p>Get the service name</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary that contains the job id, status, and result</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_application_job_info(\n    service_name: str, job_id: str, access_token: str, api_key: Dict[str, str]\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The get_application_job_info function is used to retrieve the status of a job that has been submitted to an application.\n\n    Args:\n        service_name: str: Identify the service\n        job_id: str: Identify the job\n        access_token: str: Authenticate the user\n        api_key: Dict[str: Pass in the api key for the service\n        str]: Get the service name\n\n    Returns:\n        A dictionary that contains the job id, status, and result\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get application job info.\")\n\n    try:\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_endpoint = version[\"gateway_endpoint\"]\n        service_endpoint = os.path.join(service_endpoint, job_id)\n        headers = {\n            \"accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {access_token}\",\n        }\n\n        response = requests.get(service_endpoint, headers=headers, timeout=30)\n        json_response = response.json()\n        return json_response\n    except Exception as e:\n        logger.error(\"Get application job info failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_application_job_result","title":"<code>get_application_job_result(service_name, job_id, access_token, api_key)</code>","text":"<p>The get_application_job_result function is used to retrieve the result of a job that has been submitted to an application.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service</p> required <code>job_id</code> <code>str</code> <p>str: Identify the job</p> required <code>access_token</code> <code>str</code> <p>str: Authenticate the user</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The result of the job</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_application_job_result(\n    service_name: str, job_id: str, access_token: str, api_key: Dict[str, str]\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The get_application_job_result function is used to retrieve the result of a job that has been submitted to an application.\n\n    Args:\n        service_name: str: Specify the name of the service\n        job_id: str: Identify the job\n        access_token: str: Authenticate the user\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the service name\n\n    Returns:\n        The result of the job\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get application job result.\")\n\n    try:\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_endpoint = version[\"gateway_endpoint\"]\n        service_endpoint = os.path.join(service_endpoint, job_id, \"result\")\n        headers = {\n            \"accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {access_token}\",\n        }\n\n        response = requests.get(service_endpoint, headers=headers, timeout=30)\n        assert response.status_code in [200, 201, 204]\n        json_response = response.json()\n        result = json_response[\"result\"]\n        return result\n    except Exception as e:\n        logger.error(\"Get application job result failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_application_job_status","title":"<code>get_application_job_status(service_name, job_id, access_token, api_key)</code>","text":"<p>The get_application_job_status function is used to get the status of a job.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the service name</p> required <code>job_id</code> <code>str</code> <p>str: Identify the job</p> required <code>access_token</code> <code>str</code> <p>str: Authenticate the user</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>str</code> <p>The status of the application job</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_application_job_status(service_name: str, job_id: str, access_token: str, api_key: Dict[str, str]) -&gt; str:\n    \"\"\"\n    The get_application_job_status function is used to get the status of a job.\n\n    Args:\n        service_name: str: Specify the service name\n        job_id: str: Identify the job\n        access_token: str: Authenticate the user\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the service name\n\n    Returns:\n        The status of the application job\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get application job status.\")\n\n    try:\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_endpoint = version[\"gateway_endpoint\"]\n        service_endpoint = os.path.join(service_endpoint, job_id)\n        headers = {\n            \"accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {access_token}\",\n        }\n\n        response = requests.get(service_endpoint, headers=headers, timeout=30)\n        json_response = response.json()\n        status = json_response[\"status\"]\n        return status\n    except Exception as e:\n        logger.error(\"Get application job status failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_data_pool","title":"<code>get_data_pool(data_pool_name, api_key)</code>","text":"<p>The get_data_pool function takes a data pool name and an API key as input. It then calls the get_data_pools function to retrieve all of the data pools in your account. The function then iterates through each of these data pools, looking for one with a matching name. If it finds one, it returns that dictionary object representing that specific data pool.</p> <p>Parameters:</p> Name Type Description Default <code>data_pool_name</code> <code>str</code> <p>str: Specify the name of the data pool to be deleted</p> required <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, str]]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_data_pool(data_pool_name: str, api_key: str) -&gt; Optional[Dict[str, str]]:\n    \"\"\"\n    The get_data_pool function takes a data pool name and an API key as input.\n    It then calls the get_data_pools function to retrieve all of the data pools in your account.\n    The function then iterates through each of these data pools, looking for one with a matching name.\n    If it finds one, it returns that dictionary object representing that specific data pool.\n\n    Args:\n        data_pool_name: str: Specify the name of the data pool to be deleted\n        api_key: str: Authenticate the user\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get data pool.\")\n\n    try:\n        data_pools = get_data_pools(api_key)\n        assert data_pools is not None\n\n        found_data_pool = None\n        for data_pool in data_pools:\n            if data_pool_name == data_pool[\"name\"]:\n                logger.debug(\"Get Pool: Found it!\")\n                found_data_pool = data_pool\n                return found_data_pool\n        logger.debug(\"Get Pool: Didn't found it!\")\n\n        return found_data_pool\n    except Exception as e:\n        logger.error(\"Get data pool failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_data_pool_file_information","title":"<code>get_data_pool_file_information(data_pool_name, api_key)</code>","text":"<p>The get_data_pool_file_information function returns a dictionary of dictionaries containing information about the files in a data pool. The keys of the outer dictionary are file names, and each inner dictionary contains information about one file. The following keys are available: identifier, data_pool_id, data_source_descriptor_id and file id.</p> <p>Parameters:</p> Name Type Description Default <code>data_pool_name</code> <code>str</code> <p>str: Specify the name of the data pool</p> required <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with information about the data pool files</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_data_pool_file_information(data_pool_name: str, api_key: str) -&gt; Dict[str, Any]:\n    \"\"\"\n    The get_data_pool_file_information function returns a dictionary of dictionaries containing information about the files in a data pool.\n    The keys of the outer dictionary are file names, and each inner dictionary contains information about one file.\n    The following keys are available: identifier, data_pool_id, data_source_descriptor_id and file id.\n\n    Args:\n        data_pool_name: str: Specify the name of the data pool\n        api_key: str: Authenticate the user\n\n    Returns:\n        A dictionary with information about the data pool files\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get data pool file information.\")\n\n    try:\n        data_pool = get_data_pool(data_pool_name, api_key)\n        assert data_pool is not None\n        data_pool_id = data_pool[\"id\"]\n\n        url = f\"https://platform.planqk.de/qc-catalog/data-pools/{data_pool_id}/data-source-descriptors\"\n\n        headers = {\"Content-Type\": \"application/json\", \"X-Auth-Token\": api_key}\n\n        response = requests.get(url, headers=headers, timeout=30)\n        assert response.status_code in [200, 201, 204]\n        response_json = response.json()\n\n        file_infos = {}\n        for entry in response_json:\n            name = entry[\"files\"][0][\"name\"]\n            file_infos[name] = {}\n            file_infos[name][\"identifier\"] = name\n            file_infos[name][\"data_pool_id\"] = data_pool_id\n            file_infos[name][\"data_source_descriptor_id\"] = entry[\"id\"]\n            file_infos[name][\"file_id\"] = entry[\"files\"][0][\"id\"]\n        return file_infos\n    except Exception as e:\n        logger.error(\"Get data pool file information failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_data_pools","title":"<code>get_data_pools(api_key)</code>","text":"<p>The get_data_pools function returns a list of dictionaries containing the data pools.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of data pools</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_data_pools(api_key: str) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_data_pools function returns a list of dictionaries containing the data pools.\n\n    Args:\n        api_key: str: Authenticate the user\n\n    Returns:\n        A list of data pools\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get data pools.\")\n\n    try:\n        url = \"https://platform.planqk.de/qc-catalog/data-pools\"\n\n        headers = {\"Content-Type\": \"application/json\", \"X-Auth-Token\": api_key}\n\n        response = requests.get(url, headers=headers, timeout=30)\n        assert response.status_code in [200, 201, 204]\n        data_pools = response.json()[\"content\"]\n        return data_pools\n    except Exception as e:\n        logger.error(\"Get data pools failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_managed_service_job","title":"<code>get_managed_service_job(service_name, job_id, api_key)</code>","text":"<p>The get_managed_service_job function returns a job for the specified service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Identify the service that you want to get a job for</p> required <code>job_id</code> <code>str</code> <p>str: Specify the job to get</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key for authentication</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>The job with the given id</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_managed_service_job(service_name: str, job_id: str, api_key: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    The get_managed_service_job function returns a job for the specified service.\n\n    Args:\n        service_name: str: Identify the service that you want to get a job for\n        job_id: str: Specify the job to get\n        api_key: Dict[str: Pass in the api key for authentication\n        str]: Specify the type of the parameter\n\n    Returns:\n        The job with the given id\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get managed service job.\")\n\n    try:\n        jobs = get_all_jobs_for_managed_service(service_name, api_key)\n\n        found_job = None\n        for job in jobs:\n            if job[\"id\"] == job_id:\n                found_job = job\n        return found_job\n    except Exception as e:\n        logger.error(\"Get service job failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_service","title":"<code>get_service(service_name, api_key)</code>","text":"<p>The get_service function retrieves a service from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service to be retrieved</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>A service</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_service(service_name: str, api_key: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    The get_service function retrieves a service from the Service Platform.\n\n    Args:\n        service_name: str: Specify the name of the service to be retrieved\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of the parameter\n\n    Returns:\n        A service\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        services = get_services(api_key)\n        assert services is not None\n\n        found_service = None\n        for service in services:\n            if service_name == service[\"name\"]:\n                found_service = service\n\n        if found_service is not None:\n            service_id = found_service[\"id\"]\n            found_service = services_api.get_service(service_id)\n            found_service = found_service.to_dict()\n\n        return found_service\n    except Exception as e:\n        logger.error(\"Service retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_service_job","title":"<code>get_service_job(job_id, api_key)</code>","text":"<p>The get_service_job function retrieves a service job from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>str: Specify the job id of the service job you want to get</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key for authentication</p> required <code>str]</code> <p>Specify the job id</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_service_job(job_id: str, api_key: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    The get_service_job function retrieves a service job from the Service Platform.\n\n    Args:\n        job_id: str: Specify the job id of the service job you want to get\n        api_key: Dict[str: Pass in the api key for authentication\n        str]: Specify the job id\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get managed service job.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        job = service_jobs_api.get_job(job_id)\n        assert job is not None\n        return job.to_dict()\n    except Exception as e:\n        logger.error(\"Get service job failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_service_job_result","title":"<code>get_service_job_result(job_id, api_key)</code>","text":"<p>The get_service_job_result function is used to retrieve the result of a service job.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>str: Specify the job id of the service job</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the job id</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_service_job_result(job_id: str, api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The get_service_job_result function is used to retrieve the result of a service job.\n\n    Args:\n        job_id: str: Specify the job id of the service job\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the job id\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get service job result.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        job = service_jobs_api.get_job(job_id)\n        result_string = job[\"result\"]\n        result = json.loads(result_string)\n        result = result[\"result\"]\n        logger.debug(\"Service job result returned.\")\n        return result\n    except Exception as e:\n        logger.error(\"Get service job status failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_service_job_status","title":"<code>get_service_job_status(job_id, api_key)</code>","text":"<p>The get_service_job_status function returns the status of a service job.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>str: Identify the job</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key</p> required <code>str]</code> <p>Specify the type of data that is being passed into the function</p> required <p>Returns:</p> Type Description <code>str</code> <p>The status of the service job</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_service_job_status(job_id: str, api_key: Dict[str, str]) -&gt; str:\n    \"\"\"\n    The get_service_job_status function returns the status of a service job.\n\n    Args:\n        job_id: str: Identify the job\n        api_key: Dict[str: Pass in the api key\n        str]: Specify the type of data that is being passed into the function\n\n    Returns:\n        The status of the service job\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get service job status.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        job = service_jobs_api.get_job(job_id)\n        status = job[\"status\"]\n        return status\n    except Exception as e:\n        logger.error(\"Get service job status failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_service_jobs","title":"<code>get_service_jobs(service_name, api_key)</code>","text":"<p>The get_service_jobs function returns a list of all jobs for the service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service to get jobs for</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key to authenticate with the platform</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of jobs for a service</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_service_jobs(service_name: str, api_key: Dict[str, str]) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_service_jobs function returns a list of all jobs for the service.\n\n    Args:\n        service_name: str: Specify the name of the service to get jobs for\n        api_key: Dict[str: Pass in the api key to authenticate with the platform\n        str]: Specify the service name\n\n    Returns:\n        A list of jobs for a service\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get service jobs for service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        service_definition_id = service[\"service_definitions\"][0][\"id\"]\n        jobs = service_jobs_api.get_jobs()\n        assert jobs is not None\n        service_jobs = []\n        for service_job in jobs:\n            service_job_definition_id = service_job[\"service_definition\"][\"id\"]\n            if service_job_definition_id == service_definition_id:\n                service_jobs.append(service_job.to_dict())\n        return service_jobs\n    except Exception as e:\n        logger.error(\"Get all service jobs failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_services","title":"<code>get_services(api_key, lifecycle=None)</code>","text":"<p>The get_services function retrieves all services from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <code>lifecycle</code> <code>str</code> <p>str: Filter the services based on their lifecycle</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of dictionaries</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_services(api_key: Dict[str, str], lifecycle: str = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    The get_services function retrieves all services from the Service Platform.\n\n    Args:\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of the parameter\n        lifecycle: str: Filter the services based on their lifecycle\n\n    Returns:\n        A list of dictionaries\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get services.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        if lifecycle is None:\n            created_services = services_api.get_services(lifecycle=\"CREATED\")\n            accessible_services = services_api.get_services(lifecycle=\"ACCESSIBLE\")\n            published_services = services_api.get_services(lifecycle=\"PUBLISHED\")\n\n            services = []\n            services.extend(created_services)\n            services.extend(accessible_services)\n            services.extend(published_services)\n            services = [service.to_dict() for service in services]\n        else:\n            services = services_api.get_services(lifecycle=lifecycle)\n            services = [service.to_dict() for service in services]\n        return services\n    except Exception as e:\n        logger.error(\"Services retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_subscription","title":"<code>get_subscription(application_name, api_key)</code>","text":"<p>The get_subscription function retrieves the subscription for a given application.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Specify the name of the application</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of the return value</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_subscription(application_name: str, api_key: Dict[str, str]) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"\n    The get_subscription function retrieves the subscription for a given application.\n\n    Args:\n        application_name: str: Specify the name of the application\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of the return value\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get subscriptions.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        application = get_application(application_name, api_key)\n        assert application is not None\n        application_id = application[\"id\"]\n        subscriptions = applications_api.get_application_subscriptions(application_id)\n        subscription = subscriptions[0]\n        return subscription\n    except Exception as e:\n        logger.error(\"Subscriptions retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.get_version","title":"<code>get_version(service_name, api_key)</code>","text":"<p>The get_version function returns the version of a service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the service name</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Specify the type of data that is expected to be passed into the function</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dictionary with the following keys:</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def get_version(service_name: str, api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The get_version function returns the version of a service.\n\n    Args:\n        service_name: str: Specify the service name\n        api_key: Dict[str: Specify the type of data that is expected to be passed into the function\n        str]: Specify the type of the parameter\n\n    Returns:\n        A dictionary with the following keys:\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Get version.\")\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        return service[\"service_definitions\"][0]\n    except Exception as e:\n        logger.error(\"Version retrieval failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.publish_service_internally","title":"<code>publish_service_internally(service_name, api_key)</code>","text":"<p>The publish_service_internally function publishes a service internally.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Get the service name</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass in the api key for authentication</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A service object</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def publish_service_internally(service_name: str, api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The publish_service_internally function publishes a service internally.\n\n    Args:\n        service_name: str: Get the service name\n        api_key: Dict[str: Pass in the api key for authentication\n        str]: Specify the service name\n\n    Returns:\n        A service object\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Publish service internally.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_id = service[\"id\"]\n        version_id = version[\"id\"]\n        service = services_api.publish_service_internal(service_id, version_id)\n        logger.debug(\"Service published internally succeeded.\")\n        return service\n    except Exception as e:\n        logger.error(\"Service publishing internally failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.remove_application","title":"<code>remove_application(application_name, api_key)</code>","text":"<p>The remove_application function removes an application from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Identify the application to be removed</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Specify the type of the parameter</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the application is removed</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def remove_application(application_name: str, api_key: Dict[str, str]) -&gt; bool:\n    \"\"\"\n    The remove_application function removes an application from the Service Platform.\n\n    Args:\n        application_name: str: Identify the application to be removed\n        api_key: Dict[str: Specify the type of the parameter\n        str]: Specify the type of the parameter\n\n    Returns:\n        True if the application is removed\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Remove application.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        application = get_application(application_name, api_key)\n        assert application is not None\n        application_id = application[\"id\"]\n        applications_api.delete_application(application_id)\n        logger.debug(\"Application removed.\")\n        return True\n    except Exception as e:\n        logger.error(\"Application removing failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.remove_data_pool","title":"<code>remove_data_pool(data_pool_name, api_key)</code>","text":"<p>The remove_data_pool function removes a data pool from the PlanQK platform.</p> <p>Parameters:</p> Name Type Description Default <code>data_pool_name</code> <code>str</code> <p>str: Identify the data pool</p> required <code>api_key</code> <code>str</code> <p>str: Authenticate the user</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean value</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def remove_data_pool(data_pool_name: str, api_key: str) -&gt; bool:\n    \"\"\"\n    The remove_data_pool function removes a data pool from the PlanQK platform.\n\n    Args:\n        data_pool_name: str: Identify the data pool\n        api_key: str: Authenticate the user\n\n    Returns:\n        A boolean value\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Remove data pool.\")\n\n    try:\n        headers = {\"Content-Type\": \"application/json\", \"X-Auth-Token\": api_key}\n\n        data_pool = get_data_pool(data_pool_name, api_key)\n        assert data_pool is not None\n\n        data_pool_id = data_pool[\"id\"]\n        url = f\"https://platform.planqk.de/qc-catalog/data-pools/{data_pool_id}\"\n\n        response = requests.delete(url, headers=headers, timeout=30)\n        result = response.status_code in [200, 201, 204]\n        return result\n    except Exception as e:\n        logger.error(\"Remove data pool failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.remove_service","title":"<code>remove_service(service_name, api_key)</code>","text":"<p>The remove_service function removes a service from the Service Platform.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Identify the service to be removed</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Specify the type of the parameter</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the service was removed successfully</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def remove_service(service_name: str, api_key: Dict[str, str]) -&gt; bool:\n    \"\"\"\n    The remove_service function removes a service from the Service Platform.\n\n    Args:\n        service_name: str: Identify the service to be removed\n        api_key: Dict[str: Specify the type of the parameter\n        str]: Specify the type of the parameter\n\n    Returns:\n        True if the service was removed successfully\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Remove service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n\n        service_id = service[\"id\"]\n        services_api.delete_service(service_id)\n        logger.debug(\"Service removed.\")\n        return True\n    except Exception as e:\n        logger.error(\"Service removing failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.remove_service_job","title":"<code>remove_service_job(job_id, api_key)</code>","text":"<p>The remove_service_job function removes a service job from the platform.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>str</code> <p>str: Identify the job to be removed</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the job id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean value</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def remove_service_job(job_id: str, api_key: Dict[str, str]) -&gt; bool:\n    \"\"\"\n    The remove_service_job function removes a service job from the platform.\n\n    Args:\n        job_id: str: Identify the job to be removed\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the job id\n\n    Returns:\n        A boolean value\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Remove service job.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        service_jobs_api.delete_job(job_id)\n        return True\n    except Exception as e:\n        logger.error(\"Remove service job failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.remove_subscription","title":"<code>remove_subscription(application_name, api_key)</code>","text":"<p>The remove_subscription function removes a subscription for an application.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Identify the application</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key as a dictionary</p> required <code>str]</code> <p>Specify the type of the parameter</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the subscription is removed</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def remove_subscription(application_name: str, api_key: Dict[str, str]) -&gt; bool:\n    \"\"\"\n    The remove_subscription function removes a subscription for an application.\n\n    Args:\n        application_name: str: Identify the application\n        api_key: Dict[str: Pass the api key as a dictionary\n        str]: Specify the type of the parameter\n\n    Returns:\n        True if the subscription is removed\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Remove subscription.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        application = get_application(application_name, api_key)\n        assert application is not None\n        subscription = get_subscription(application_name, api_key)\n        application_id = application[\"id\"]\n        subscription_id = subscription[\"id\"]\n        applications_api.delete_application_subscription(application_id, subscription_id)\n        logger.debug(\"Subscription removed.\")\n        return True\n    except Exception as e:\n        logger.error(\"Subscription removal failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.subscribe_application_to_service","title":"<code>subscribe_application_to_service(application_name, service_name, api_key)</code>","text":"<p>The subscribe_application_to_service function subscribes an application to a service.</p> <p>Parameters:</p> Name Type Description Default <code>application_name</code> <code>str</code> <p>str: Specify the name of the application to be subscribed</p> required <code>service_name</code> <code>str</code> <p>str: Specify the name of the service to be subscribed to</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the type of data that is expected in the function</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A subscription object</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def subscribe_application_to_service(\n    application_name: str, service_name: str, api_key: Dict[str, str]\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The subscribe_application_to_service function subscribes an application to a service.\n\n    Args:\n        application_name: str: Specify the name of the application to be subscribed\n        service_name: str: Specify the name of the service to be subscribed to\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the type of data that is expected in the function\n\n    Returns:\n        A subscription object\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Subscribe application to service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    applications_api = ServicePlatformApplicationsApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        application = get_application(application_name, api_key)\n        assert application is not None\n        service_id = service[\"id\"]\n        application_id = application[\"id\"]\n        subscription_request = CreateInternalSubscriptionRequest(application_id=application_id, service_id=service_id)\n        subscription = applications_api.create_internal_subscription(\n            id=application_id, create_internal_subscription_request=subscription_request\n        )\n        logger.debug(\"Application subscribed.\")\n        return subscription\n    except Exception as e:\n        logger.error(\"Application subscription failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.trigger_application_job","title":"<code>trigger_application_job(service_name, data, params, access_token, api_key)</code>","text":"<p>The trigger_application_job function is used to trigger the execution of a service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Identify the service that is being called</p> required <code>data</code> <code>Dict[str, list]</code> <p>Dict[str: Pass the data to the application</p> required <code>list]</code> <p>Specify the list of data to be passed to the application</p> required <code>params</code> <code>Dict[str, str]</code> <p>Dict[str: Pass parameters to the application</p> required <code>str]</code> <p>Specify the service name</p> required <code>access_token</code> <code>str</code> <p>str: Authenticate the user</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Get the api key from the user</p> required <code>str]</code> <p>Specify the service name</p> required <code></code> <p>Get the version of the service</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The job id</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def trigger_application_job(\n    service_name: str,\n    data: Dict[str, list],\n    params: Dict[str, str],\n    access_token: str,\n    api_key: Dict[str, str],\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The trigger_application_job function is used to trigger the execution of a service.\n\n    Args:\n        service_name: str: Identify the service that is being called\n        data: Dict[str: Pass the data to the application\n        list]: Specify the list of data to be passed to the application\n        params: Dict[str: Pass parameters to the application\n        str]: Specify the service name\n        access_token: str: Authenticate the user\n        api_key: Dict[str: Get the api key from the user\n        str]: Specify the service name\n        : Get the version of the service\n\n    Returns:\n        The job id\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Trigger application execution.\")\n\n    try:\n        version = get_version(service_name, api_key)\n        service_endpoint = version[\"gateway_endpoint\"]\n        service_endpoint = f\"{service_endpoint}/\"\n\n        headers = {\n            \"accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        payload = {\"data\": data, \"params\": params}\n\n        response = requests.post(service_endpoint, json=payload, headers=headers, timeout=30)\n        assert response.status_code in [200, 201, 204]\n        json_response = response.json()\n        return json_response\n    except Exception as e:\n        logger.error(\"Trigger application execution failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.trigger_service_job","title":"<code>trigger_service_job(service_name, api_key, data=None, params=None, mode='DATA_UPLOAD', data_ref=None, timeout=500, step=1)</code>","text":"<p>The trigger_service_job function triggers a service job on the platform.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Authenticate the user</p> required <code>str]</code> <p>Specify the service name</p> required <code>data</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass in the input data to the service</p> <code>None</code> <code>Any]</code> <p>Define the type of data that is returned from the function</p> required <code>params</code> <code>Dict[str, Any]</code> <p>Dict[str: Pass parameters to the service</p> <code>None</code> <code>Any]</code> <p>Specify that the function can return any type of data</p> required <code>mode</code> <code>str</code> <p>str: Specify whether the service job is triggered with data from a data pool or by uploading the data</p> <code>'DATA_UPLOAD'</code> <code>data_ref</code> <code>Dict[str, Any]</code> <p>Dict[str: Specify the data pool reference</p> <code>None</code> <code>Any]</code> <p>Specify that the function can return any type of data</p> required <code>timeout</code> <p>Set the maximum time to wait for a job to finish</p> <code>500</code> <code>step</code> <p>Control the polling interval</p> <code>1</code> <code></code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The job object</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def trigger_service_job(\n    service_name: str,\n    api_key: Dict[str, str],\n    data: Dict[str, Any] = None,\n    params: Dict[str, Any] = None,\n    mode: str = \"DATA_UPLOAD\",\n    data_ref: Dict[str, Any] = None,\n    timeout=500,\n    step=1,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The trigger_service_job function triggers a service job on the platform.\n\n    Args:\n        service_name: str: Specify the name of the service\n        api_key: Dict[str: Authenticate the user\n        str]: Specify the service name\n        data: Dict[str: Pass in the input data to the service\n        Any]: Define the type of data that is returned from the function\n        params: Dict[str: Pass parameters to the service\n        Any]: Specify that the function can return any type of data\n        mode: str: Specify whether the service job is triggered with data from a data pool or by uploading the data\n        data_ref: Dict[str: Specify the data pool reference\n        Any]: Specify that the function can return any type of data\n        timeout: Set the maximum time to wait for a job to finish\n        step: Control the polling interval\n        : Specify the service name\n\n    Returns:\n        The job object\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    service_jobs_api = ServicePlatformJobsApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n\n        service_definition_id = service[\"service_definitions\"][0][\"id\"]\n\n        if mode == \"DATA_UPLOAD\":\n            create_job_request = CreateJobRequest(\n                service_definition_id=service_definition_id,\n                input_data=json.dumps(data),\n                parameters=json.dumps(params),\n                persist_result=True,\n            )\n        elif mode == \"DATA_POOL\":\n            data_ref = DataPoolRef(**data_ref)\n\n            create_job_request = CreateJobRequest(\n                service_definition_id=service_definition_id,\n                input_data_ref=data_ref,\n                parameters=json.dumps(params),\n                persist_result=True,\n            )\n        else:\n            raise Exception(\"Invalid mode, allowed modes are: [DATA_UPLOAD, DATA_POOL].\")\n\n        job = service_jobs_api.create_job(create_job_request=create_job_request)\n        job_id = job[\"id\"]\n        logger.info(\"Started service job: %s.\", job_id)\n        wait_for_service_job_to_be_finished(job_id, api_key, timeout=timeout, step=step)\n        job = service_jobs_api.get_job(job_id)\n        return job\n    except Exception as e:\n        logger.error(\"Trigger service job failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"},{"location":"reference/#src.pyplanqk.low_level_actions.unpublish_service","title":"<code>unpublish_service(service_name, api_key)</code>","text":"<p>The unpublish_service function unpublishes a service.</p> <p>Parameters:</p> Name Type Description Default <code>service_name</code> <code>str</code> <p>str: Specify the name of the service to be published</p> required <code>api_key</code> <code>Dict[str, str]</code> <p>Dict[str: Pass the api key to the function</p> required <code>str]</code> <p>Specify the service name</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The service object</p> Doc Author <p>Trelent</p> Source code in <code>src/pyplanqk/low_level_actions.py</code> <pre><code>def unpublish_service(service_name: str, api_key: Dict[str, str]) -&gt; Dict[str, Any]:\n    \"\"\"\n    The unpublish_service function unpublishes a service.\n\n    Args:\n        service_name: str: Specify the name of the service to be published\n        api_key: Dict[str: Pass the api key to the function\n        str]: Specify the service name\n\n    Returns:\n        The service object\n\n    Doc Author:\n        Trelent\n    \"\"\"\n    logger.debug(\"Unpublish service.\")\n\n    configuration = Configuration(api_key=api_key)\n    api_client = ApiClient(configuration=configuration)\n    services_api = ServicePlatformServicesApi(api_client=api_client)\n\n    try:\n        service = get_service(service_name, api_key)\n        assert service is not None\n        version = get_version(service_name, api_key)\n        assert version is not None\n        service_id = service[\"id\"]\n        version_id = version[\"id\"]\n        service = services_api.unpublish_service(service_id, version_id)\n        logger.debug(\"Service unpublished.\")\n        return service\n    except Exception as e:\n        logger.error(\"Service unpublishing failed.\")\n        logger.error(e)\n        raise e\n</code></pre>"}]}