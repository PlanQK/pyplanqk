"""
    PlanQK Platform OpenAPI definition

    OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: info@stoneone.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.metering_request import MeteringRequest
from openapi_client.model.metering_response import MeteringResponse


class ServicePlatformMeteringAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.metering_endpoint = _Endpoint(
            settings={
                'response_type': (MeteringResponse,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/external-services/metering',
                'operation_id': 'metering',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'metering_request',
                ],
                'required': [
                    'metering_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'metering_request':
                        (MeteringRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'metering_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def metering(
        self,
        metering_request,
        **kwargs
    ):
        """metering  # noqa: E501

         This endpoint is used to report the usage of your external service. The request body must contain a correlationId, which is forwarded by the PlanQK API Gateway upon service execution. The PlanQK Platform then logs a usage event for the corresponding product item (productId) and the submitted count. The correlationId is needed to correlate your reported usage to the corresponding user of your service. You can obtain the correlation id from the x-correlation-id header of the request that was forwarded by our API Gateway to your service. The productId is the id of the product you want to report. You can find the id of your product in the pricing plan table on the service details page. The count is the quantity of units you want to report.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.metering(metering_request, async_req=True)
        >>> result = thread.get()

        Args:
            metering_request (MeteringRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MeteringResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['metering_request'] = \
            metering_request
        return self.metering_endpoint.call_with_http_info(**kwargs)

