"""
    PlanQK Platform OpenAPI definition

    OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: info@stoneone.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.build_job_dto import BuildJobDto
from openapi_client.model.cpu_configuration import CpuConfiguration
from openapi_client.model.create_external_service_pricing_plan_request import CreateExternalServicePricingPlanRequest
from openapi_client.model.create_managed_service_pricing_plan_request import CreateManagedServicePricingPlanRequest
from openapi_client.model.gpu_configuration import GpuConfiguration
from openapi_client.model.memory_configuration import MemoryConfiguration
from openapi_client.model.pricing_plan_dto import PricingPlanDto
from openapi_client.model.product_usage_dto import ProductUsageDto
from openapi_client.model.runtime_configuration import RuntimeConfiguration
from openapi_client.model.service_definition_command import ServiceDefinitionCommand
from openapi_client.model.service_definition_dto import ServiceDefinitionDto
from openapi_client.model.service_dto import ServiceDto
from openapi_client.model.service_execution_dto import ServiceExecutionDto
from openapi_client.model.service_overview_dto import ServiceOverviewDto
from openapi_client.model.subscription_dto import SubscriptionDto
# from openapi_client.model.unknownbasetype import UNKNOWNBASETYPE
from openapi_client.model.update_version_request import UpdateVersionRequest


class ServicePlatformServicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_pricing_plan_external_service_endpoint = _Endpoint(
            settings={
                'response_type': (PricingPlanDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/external-services/{serviceId}/versions/{versionId}/pricing-plans',
                'operation_id': 'add_pricing_plan_external_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'create_external_service_pricing_plan_request',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'create_external_service_pricing_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'create_external_service_pricing_plan_request':
                        (CreateExternalServicePricingPlanRequest,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'create_external_service_pricing_plan_request': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.add_pricing_plan_managed_service_endpoint = _Endpoint(
            settings={
                'response_type': (PricingPlanDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/managed-services/{serviceId}/versions/{versionId}/pricing-plans',
                'operation_id': 'add_pricing_plan_managed_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'create_managed_service_pricing_plan_request',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'create_managed_service_pricing_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'create_managed_service_pricing_plan_request':
                        (CreateManagedServicePricingPlanRequest,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'create_managed_service_pricing_plan_request': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.commands_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/commands',
                'operation_id': 'commands',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'service_definition_command',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'service_definition_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'service_definition_command':
                        (ServiceDefinitionCommand,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'service_definition_command': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_external_service_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/v2/external-services',
                'operation_id': 'create_external_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'url',
                    'description',
                    'security_configuration',
                    'username',
                    'password',
                    'x_organization_id',
                    'api_definition',
                ],
                'required': [
                    'name',
                    'url',
                ],
                'nullable': [
                ],
                'enum': [
                    'security_configuration',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('security_configuration',): {

                        "NONE": "NONE",
                        "BASIC": "BASIC"
                    },
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'url':
                        (str,),
                    'description':
                        (str,),
                    'security_configuration':
                        (str,),
                    'username':
                        (str,),
                    'password':
                        (str,),
                    'x_organization_id':
                        (str,),
                    'api_definition':
                        (file_type,),
                },
                'attribute_map': {
                    'name': 'name',
                    'url': 'url',
                    'description': 'description',
                    'security_configuration': 'securityConfiguration',
                    'username': 'username',
                    'password': 'password',
                    'x_organization_id': 'X-OrganizationId',
                    'api_definition': 'apiDefinition',
                },
                'location_map': {
                    'name': 'query',
                    'url': 'query',
                    'description': 'query',
                    'security_configuration': 'query',
                    'username': 'query',
                    'password': 'query',
                    'x_organization_id': 'header',
                    'api_definition': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_managed_service_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/v2/managed-services',
                'operation_id': 'create_managed_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'description',
                    'milli_cpus',
                    'memory_in_megabytes',
                    'runtime',
                    'gpu_count',
                    'gpu_accelerator',
                    'x_organization_id',
                    'user_code',
                    'api_definition',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                    'runtime',
                    'gpu_accelerator',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('runtime',): {

                        "DOCKER": "DOCKER",
                        "PYTHON_TEMPLATE": "PYTHON_TEMPLATE"
                    },
                    ('gpu_accelerator',): {

                        "NVIDIA_TESLA_T4": "NVIDIA_TESLA_T4",
                        "NVIDIA_TESLA_V100": "NVIDIA_TESLA_V100",
                        "NVIDIA_TESLA_A100": "NVIDIA_TESLA_A100",
                        "NVIDIA_TESLA_P100": "NVIDIA_TESLA_P100",
                        "NONE": "NONE"
                    },
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'description':
                        (str,),
                    'milli_cpus':
                        (int,),
                    'memory_in_megabytes':
                        (int,),
                    'runtime':
                        (str,),
                    'gpu_count':
                        (int,),
                    'gpu_accelerator':
                        (str,),
                    'x_organization_id':
                        (str,),
                    'user_code':
                        (file_type,),
                    'api_definition':
                        (file_type,),
                },
                'attribute_map': {
                    'name': 'name',
                    'description': 'description',
                    'milli_cpus': 'milliCpus',
                    'memory_in_megabytes': 'memoryInMegabytes',
                    'runtime': 'runtime',
                    'gpu_count': 'gpuCount',
                    'gpu_accelerator': 'gpuAccelerator',
                    'x_organization_id': 'X-OrganizationId',
                    'user_code': 'userCode',
                    'api_definition': 'apiDefinition',
                },
                'location_map': {
                    'name': 'query',
                    'description': 'query',
                    'milli_cpus': 'query',
                    'memory_in_megabytes': 'query',
                    'runtime': 'query',
                    'gpu_count': 'query',
                    'gpu_accelerator': 'query',
                    'x_organization_id': 'header',
                    'user_code': 'form',
                    'api_definition': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.delete_pricing_plan_external_service_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/external-services/{serviceId}/versions/{versionId}/pricing-plans/{pricingPlanId}',
                'operation_id': 'delete_pricing_plan_external_service',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'pricing_plan_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'pricing_plan_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'pricing_plan_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'pricing_plan_id': 'pricingPlanId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'pricing_plan_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_pricing_plan_managed_service_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/managed-services/{serviceId}/versions/{versionId}/pricing-plans/{pricingPlanId}',
                'operation_id': 'delete_pricing_plan_managed_service',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'pricing_plan_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'pricing_plan_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'pricing_plan_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'pricing_plan_id': 'pricingPlanId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'pricing_plan_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_service_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{id}',
                'operation_id': 'delete_service',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'x_organization_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_api_definition_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/api-spec',
                'operation_id': 'get_api_definition',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_build_logs_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/build-logs',
                'operation_id': 'get_build_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_build_status_endpoint = _Endpoint(
            settings={
                'response_type': (BuildJobDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/build-status',
                'operation_id': 'get_build_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_external_service_metering_events_endpoint = _Endpoint(
            settings={
                'response_type': ([ProductUsageDto],),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/external-services/{serviceId}/versions/{versionId}/metering-events',
                'operation_id': 'get_external_service_metering_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_managed_service_executions_endpoint = _Endpoint(
            settings={
                'response_type': ([ServiceExecutionDto],),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/managed-services/{serviceId}/versions/{versionId}/executions',
                'operation_id': 'get_managed_service_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{id}',
                'operation_id': 'get_service',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'x_organization_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_subscriptions_endpoint = _Endpoint(
            settings={
                'response_type': ([SubscriptionDto],),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/subscriptions',
                'operation_id': 'get_service_subscriptions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_version_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}',
                'operation_id': 'get_service_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_service_versions_endpoint = _Endpoint(
            settings={
                'response_type': ([ServiceDefinitionDto],),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{id}/versions',
                'operation_id': 'get_service_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'x_organization_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_services_endpoint = _Endpoint(
            settings={
                'response_type': ([ServiceOverviewDto],),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services',
                'operation_id': 'get_services',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lifecycle',
                    'x_organization_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'lifecycle',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('lifecycle',): {

                        "CREATED": "CREATED",
                        "ACCESSIBLE": "ACCESSIBLE",
                        "PUBLISHED": "PUBLISHED"
                    },
                },
                'openapi_types': {
                    'lifecycle':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'lifecycle': 'lifecycle',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'lifecycle': 'query',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_source_code_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/source-code',
                'operation_id': 'get_source_code',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.publish_service_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/publish',
                'operation_id': 'publish_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.publish_service_internal_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/publish-internal',
                'operation_id': 'publish_service_internal',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unpublish_service_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/unpublish',
                'operation_id': 'unpublish_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_api_definition_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/v2/services/{serviceId}/versions/{versionId}/api-spec',
                'operation_id': 'update_api_definition',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'file',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'file':
                        (file_type,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'file': 'file',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'file': 'form',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_resource_configuration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/resource-configuration',
                'operation_id': 'update_resource_configuration',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'unknown_base_type',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'unknown_base_type',
                ],
                'nullable': [
                    'unknown_base_type',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    # 'unknown_base_type':
                        # (UNKNOWN_BASE_TYPE,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    # 'unknown_base_type': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_runtime_configuration_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}/runtime-configuration',
                'operation_id': 'update_runtime_configuration',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'runtime_configuration',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'runtime_configuration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'runtime_configuration':
                        (RuntimeConfiguration,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'runtime_configuration': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_service_version_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/services/{serviceId}/versions/{versionId}',
                'operation_id': 'update_service_version',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'update_version_request',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'update_version_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'update_version_request':
                        (UpdateVersionRequest,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'update_version_request': 'body',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_source_code_endpoint = _Endpoint(
            settings={
                'response_type': (ServiceDefinitionDto,),
                'auth': [
                    'apiKey',
                    'oauth2'
                ],
                'endpoint_path': '/v2/services/{serviceId}/versions/{versionId}/source-code',
                'operation_id': 'update_source_code',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'service_id',
                    'version_id',
                    'source_code',
                    'x_organization_id',
                ],
                'required': [
                    'service_id',
                    'version_id',
                    'source_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'service_id':
                        (str,),
                    'version_id':
                        (str,),
                    'source_code':
                        (file_type,),
                    'x_organization_id':
                        (str,),
                },
                'attribute_map': {
                    'service_id': 'serviceId',
                    'version_id': 'versionId',
                    'source_code': 'sourceCode',
                    'x_organization_id': 'X-OrganizationId',
                },
                'location_map': {
                    'service_id': 'path',
                    'version_id': 'path',
                    'source_code': 'form',
                    'x_organization_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def add_pricing_plan_external_service(
        self,
        service_id,
        version_id,
        create_external_service_pricing_plan_request,
        **kwargs
    ):
        """add_pricing_plan_external_service  # noqa: E501

        Add a pricing plan to an external service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_pricing_plan_external_service(service_id, version_id, create_external_service_pricing_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            create_external_service_pricing_plan_request (CreateExternalServicePricingPlanRequest):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PricingPlanDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['create_external_service_pricing_plan_request'] = \
            create_external_service_pricing_plan_request
        return self.add_pricing_plan_external_service_endpoint.call_with_http_info(**kwargs)

    def add_pricing_plan_managed_service(
        self,
        service_id,
        version_id,
        create_managed_service_pricing_plan_request,
        **kwargs
    ):
        """add_pricing_plan_managed_service  # noqa: E501

        Adds a pricing plan to a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_pricing_plan_managed_service(service_id, version_id, create_managed_service_pricing_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            create_managed_service_pricing_plan_request (CreateManagedServicePricingPlanRequest):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PricingPlanDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['create_managed_service_pricing_plan_request'] = \
            create_managed_service_pricing_plan_request
        return self.add_pricing_plan_managed_service_endpoint.call_with_http_info(**kwargs)

    def commands(
        self,
        service_id,
        version_id,
        service_definition_command,
        **kwargs
    ):
        """commands  # noqa: E501

        This endpoint is used to execute certain commands for a specific service definition. The \"UNPUBLISH\" command tries to unpublish a service (service definition), however it returns a 409 Conflict in case it still has active subscriptions or is used in use case relations. The \"UNPUBLISH_FORCE\" command will forcefully unpublish a service definition, i.e., it cancels all active subscriptions and all use case relations will be removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.commands(service_id, version_id, service_definition_command, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            service_definition_command (ServiceDefinitionCommand):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['service_definition_command'] = \
            service_definition_command
        return self.commands_endpoint.call_with_http_info(**kwargs)

    def create_external_service(
        self,
        name,
        url,
        **kwargs
    ):
        """create_external_service  # noqa: E501

        Creates a new external service within your organization or for yourself, which is running somewhere (e.g., on your own infrastructure) and you just want the PlanQK platform to manage the access to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_external_service(name, url, async_req=True)
        >>> result = thread.get()

        Args:
            name (str):
            url (str):

        Keyword Args:
            description (str): [optional]
            security_configuration (str): [optional] if omitted the server will use the default value of "NONE"
            username (str): [optional]
            password (str): [optional]
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            api_definition (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['url'] = \
            url
        return self.create_external_service_endpoint.call_with_http_info(**kwargs)

    def create_managed_service(
        self,
        name,
        **kwargs
    ):
        """create_managed_service  # noqa: E501

        Creates a new managed service within your organization or for yourself, which is running on the PlanQK platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_managed_service(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str):

        Keyword Args:
            description (str): [optional]
            milli_cpus (int): [optional]
            memory_in_megabytes (int): [optional]
            runtime (str): [optional] if omitted the server will use the default value of "PYTHON_TEMPLATE"
            gpu_count (int): [optional]
            gpu_accelerator (str): [optional] if omitted the server will use the default value of "NONE"
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            user_code (file_type): [optional]
            api_definition (file_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.create_managed_service_endpoint.call_with_http_info(**kwargs)

    def delete_pricing_plan_external_service(
        self,
        service_id,
        version_id,
        pricing_plan_id,
        **kwargs
    ):
        """delete_pricing_plan_external_service  # noqa: E501

        Delete a pricing plan of an external service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pricing_plan_external_service(service_id, version_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            pricing_plan_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['pricing_plan_id'] = \
            pricing_plan_id
        return self.delete_pricing_plan_external_service_endpoint.call_with_http_info(**kwargs)

    def delete_pricing_plan_managed_service(
        self,
        service_id,
        version_id,
        pricing_plan_id,
        **kwargs
    ):
        """delete_pricing_plan_managed_service  # noqa: E501

        Delete a pricing plan of a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pricing_plan_managed_service(service_id, version_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            pricing_plan_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['pricing_plan_id'] = \
            pricing_plan_id
        return self.delete_pricing_plan_managed_service_endpoint.call_with_http_info(**kwargs)

    def delete_service(
        self,
        id,
        **kwargs
    ):
        """delete_service  # noqa: E501

        Deletes a service. Published services need to be unpublish before it can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_service(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.delete_service_endpoint.call_with_http_info(**kwargs)

    def get_api_definition(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_api_definition  # noqa: E501

        Gets the API definition of a service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_api_definition(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_api_definition_endpoint.call_with_http_info(**kwargs)

    def get_build_logs(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_build_logs  # noqa: E501

        Returns the logs of the last build of a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_build_logs(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_build_logs_endpoint.call_with_http_info(**kwargs)

    def get_build_status(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_build_status  # noqa: E501

        Gets the build status of a managed service. For example, only after a successful build the service can be published, either internally or publicly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_build_status(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BuildJobDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_build_status_endpoint.call_with_http_info(**kwargs)

    def get_external_service_metering_events(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_external_service_metering_events  # noqa: E501

        Retrieves a list of metering events reported for this external service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_service_metering_events(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProductUsageDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_external_service_metering_events_endpoint.call_with_http_info(**kwargs)

    def get_managed_service_executions(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_managed_service_executions  # noqa: E501

        Retrieves the executions of a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_managed_service_executions(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ServiceExecutionDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_managed_service_executions_endpoint.call_with_http_info(**kwargs)

    def get_service(
        self,
        id,
        **kwargs
    ):
        """get_service  # noqa: E501

        Gets a specific service and its basic properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_service_endpoint.call_with_http_info(**kwargs)

    def get_service_subscriptions(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_service_subscriptions  # noqa: E501

        Gets a list of all active subscriptions of a specific service version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_subscriptions(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SubscriptionDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_service_subscriptions_endpoint.call_with_http_info(**kwargs)

    def get_service_version(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_service_version  # noqa: E501

        Gets a specific service version and its basic properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_version(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_service_version_endpoint.call_with_http_info(**kwargs)

    def get_service_versions(
        self,
        id,
        **kwargs
    ):
        """get_service_versions  # noqa: E501

        Gets a list of all service versions. Note: At the moment, there is only one service version per service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_service_versions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ServiceDefinitionDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_service_versions_endpoint.call_with_http_info(**kwargs)

    def get_services(
        self,
        **kwargs
    ):
        """get_services  # noqa: E501

        Gets a list of all services. Use the \"lifecycle\" parameter to filter the resulting list based on the service' lifecycle state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_services(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lifecycle (str): [optional]
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ServiceOverviewDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_services_endpoint.call_with_http_info(**kwargs)

    def get_source_code(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """get_source_code  # noqa: E501

        Returns the source code archive that was used to create the most recent version of the service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_source_code(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.get_source_code_endpoint.call_with_http_info(**kwargs)

    def publish_service(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """publish_service  # noqa: E501

        Publishes a service publicly to the marketplace. Publicly published services can be subscribed and consumed by other users of the PlanQK platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.publish_service(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.publish_service_endpoint.call_with_http_info(**kwargs)

    def publish_service_internal(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """publish_service_internal  # noqa: E501

        Publishes a service internally. Internally published services can only be subscribed and consumed by yourself or within your organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.publish_service_internal(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.publish_service_internal_endpoint.call_with_http_info(**kwargs)

    def unpublish_service(
        self,
        service_id,
        version_id,
        **kwargs
    ):
        """unpublish_service  # noqa: E501

        This endpoint is deprecated and will be replaced by the \"/commands\" endpoint. However, it unpublishes a service forcefully and cancels all active subscriptions while removing all use case relations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unpublish_service(service_id, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        return self.unpublish_service_endpoint.call_with_http_info(**kwargs)

    def update_api_definition(
        self,
        service_id,
        version_id,
        file,
        **kwargs
    ):
        """update_api_definition  # noqa: E501

        Updates the API definition of a service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_api_definition(service_id, version_id, file, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            file (file_type):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['file'] = \
            file
        return self.update_api_definition_endpoint.call_with_http_info(**kwargs)

    def update_resource_configuration(
        self,
        service_id,
        version_id,
        unknown_base_type,
        **kwargs
    ):
        """update_resource_configuration  # noqa: E501

        Updates the vCPU, memory, and GPU configuration of a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_resource_configuration(service_id, version_id, unknown_base_type, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            unknown_base_type (UNKNOWN_BASE_TYPE):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['unknown_base_type'] = \
            unknown_base_type
        return self.update_resource_configuration_endpoint.call_with_http_info(**kwargs)

    def update_runtime_configuration(
        self,
        service_id,
        version_id,
        runtime_configuration,
        **kwargs
    ):
        """update_runtime_configuration  # noqa: E501

        Updates the runtime configuration, including environment variables, of a managed service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_runtime_configuration(service_id, version_id, runtime_configuration, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            runtime_configuration (RuntimeConfiguration):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['runtime_configuration'] = \
            runtime_configuration
        return self.update_runtime_configuration_endpoint.call_with_http_info(**kwargs)

    def update_service_version(
        self,
        service_id,
        version_id,
        update_version_request,
        **kwargs
    ):
        """update_service_version  # noqa: E501

        Updates a specific service version's description or industry assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_service_version(service_id, version_id, update_version_request, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            update_version_request (UpdateVersionRequest):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['update_version_request'] = \
            update_version_request
        return self.update_service_version_endpoint.call_with_http_info(**kwargs)

    def update_source_code(
        self,
        service_id,
        version_id,
        source_code,
        **kwargs
    ):
        """update_source_code  # noqa: E501

        Updates the source code of a managed service and triggers a new build.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_source_code(service_id, version_id, source_code, async_req=True)
        >>> result = thread.get()

        Args:
            service_id (str):
            version_id (str):
            source_code (file_type):

        Keyword Args:
            x_organization_id (str): The ID of your organization in case you want to perform operations in this context. Leave it empty to operate in your personal space.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ServiceDefinitionDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['service_id'] = \
            service_id
        kwargs['version_id'] = \
            version_id
        kwargs['source_code'] = \
            source_code
        return self.update_source_code_endpoint.call_with_http_info(**kwargs)

